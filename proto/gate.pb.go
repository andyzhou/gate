// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gate.proto

package gate

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//define node status
type NodeStatus int32

const (
	NodeStatus_NODE_DOWN     NodeStatus = 0
	NodeStatus_NODE_UP       NodeStatus = 1
	NodeStatus_NODE_MAINTAIN NodeStatus = 2
)

var NodeStatus_name = map[int32]string{
	0: "NODE_DOWN",
	1: "NODE_UP",
	2: "NODE_MAINTAIN",
}

var NodeStatus_value = map[string]int32{
	"NODE_DOWN":     0,
	"NODE_UP":       1,
	"NODE_MAINTAIN": 2,
}

func (x NodeStatus) String() string {
	return proto.EnumName(NodeStatus_name, int32(x))
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_743bb58a714d8b7d, []int{0}
}

//byte message data
type ByteMessage struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	MessageId            uint32   `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
	ConnId               uint32   `protobuf:"varint,3,opt,name=connId,proto3" json:"connId,omitempty"`
	PlayerId             int64    `protobuf:"varint,4,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	CastConnIds          []uint32 `protobuf:"varint,6,rep,packed,name=castConnIds,proto3" json:"castConnIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteMessage) Reset()         { *m = ByteMessage{} }
func (m *ByteMessage) String() string { return proto.CompactTextString(m) }
func (*ByteMessage) ProtoMessage()    {}
func (*ByteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_743bb58a714d8b7d, []int{0}
}

func (m *ByteMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByteMessage.Unmarshal(m, b)
}
func (m *ByteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByteMessage.Marshal(b, m, deterministic)
}
func (m *ByteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteMessage.Merge(m, src)
}
func (m *ByteMessage) XXX_Size() int {
	return xxx_messageInfo_ByteMessage.Size(m)
}
func (m *ByteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ByteMessage proto.InternalMessageInfo

func (m *ByteMessage) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ByteMessage) GetMessageId() uint32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *ByteMessage) GetConnId() uint32 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *ByteMessage) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ByteMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ByteMessage) GetCastConnIds() []uint32 {
	if m != nil {
		return m.CastConnIds
	}
	return nil
}

func init() {
	proto.RegisterEnum("gate.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterType((*ByteMessage)(nil), "gate.ByteMessage")
}

func init() { proto.RegisterFile("gate.proto", fileDescriptor_743bb58a714d8b7d) }

var fileDescriptor_743bb58a714d8b7d = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x9d, 0xb6, 0xb6, 0xe6, 0xc6, 0x40, 0x7a, 0x17, 0x32, 0x14, 0x17, 0x41, 0x5c, 0x0c,
	0x2e, 0x8a, 0x28, 0xba, 0x71, 0xd5, 0x58, 0x91, 0x2c, 0x9a, 0xca, 0x44, 0x71, 0x29, 0x63, 0xe6,
	0x52, 0x02, 0xcd, 0x8f, 0x99, 0xa9, 0x50, 0xf0, 0xad, 0x7c, 0x41, 0x71, 0xac, 0x5a, 0x70, 0xe3,
	0xee, 0x7c, 0x67, 0xe6, 0x2c, 0xee, 0x07, 0xb0, 0x50, 0x96, 0xc6, 0x4d, 0x5b, 0xdb, 0x1a, 0x7b,
	0x9f, 0xf9, 0xe8, 0x9d, 0x81, 0x1f, 0xaf, 0x2d, 0xcd, 0xc8, 0x18, 0xb5, 0x20, 0xe4, 0x30, 0x30,
	0xd4, 0xbe, 0x16, 0x39, 0x71, 0x16, 0x31, 0xe1, 0xc9, 0x6f, 0xc4, 0x43, 0xf0, 0xca, 0xaf, 0x4f,
	0x89, 0xe6, 0x9d, 0x88, 0x89, 0x40, 0xfe, 0x16, 0x78, 0x00, 0xfd, 0xbc, 0xae, 0xaa, 0x44, 0xf3,
	0xae, 0x7b, 0xda, 0x10, 0x8e, 0x60, 0xaf, 0x59, 0xaa, 0x35, 0xb5, 0x89, 0xe6, 0xbd, 0x88, 0x89,
	0xae, 0xfc, 0x61, 0x44, 0xe8, 0x69, 0x65, 0x15, 0xdf, 0x8d, 0x98, 0xd8, 0x97, 0x2e, 0xe3, 0x31,
	0xf8, 0xb9, 0x32, 0xf6, 0xda, 0xad, 0x0d, 0xef, 0x47, 0x5d, 0x11, 0xc4, 0x9d, 0x90, 0xc9, 0xed,
	0xfa, 0xe4, 0x0a, 0x20, 0xad, 0x35, 0x65, 0x56, 0xd9, 0x95, 0xc1, 0x00, 0xbc, 0x74, 0x3e, 0xbd,
	0x79, 0x9a, 0xce, 0x1f, 0xd3, 0x70, 0x07, 0x7d, 0x18, 0x38, 0x7c, 0xb8, 0x0b, 0x19, 0x0e, 0x21,
	0x70, 0x30, 0x9b, 0x24, 0xe9, 0xfd, 0x24, 0x49, 0xc3, 0xce, 0xd9, 0x1b, 0xf8, 0xb7, 0xca, 0x52,
	0xb6, 0xb9, 0xeb, 0x02, 0x82, 0xac, 0x28, 0x9b, 0x25, 0x49, 0x7a, 0x59, 0x91, 0xb1, 0x38, 0x1c,
	0x3b, 0x4b, 0x5b, 0x56, 0x46, 0x7f, 0x2b, 0xbc, 0x04, 0x88, 0x8b, 0x4a, 0x67, 0xb6, 0x25, 0x55,
	0xfe, 0x6f, 0x23, 0xd8, 0x29, 0x7b, 0xee, 0x3b, 0xfb, 0xe7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x40, 0x61, 0x08, 0x8b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GateServiceClient is the client API for GateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GateServiceClient interface {
	//simple bs mode
	SimpleRequest(ctx context.Context, in *ByteMessage, opts ...grpc.CallOption) (*ByteMessage, error)
	//stream mode
	//cast or receive data between gate and target service
	BindStream(ctx context.Context, opts ...grpc.CallOption) (GateService_BindStreamClient, error)
}

type gateServiceClient struct {
	cc *grpc.ClientConn
}

func NewGateServiceClient(cc *grpc.ClientConn) GateServiceClient {
	return &gateServiceClient{cc}
}

func (c *gateServiceClient) SimpleRequest(ctx context.Context, in *ByteMessage, opts ...grpc.CallOption) (*ByteMessage, error) {
	out := new(ByteMessage)
	err := c.cc.Invoke(ctx, "/gate.GateService/SimpleRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateServiceClient) BindStream(ctx context.Context, opts ...grpc.CallOption) (GateService_BindStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GateService_serviceDesc.Streams[0], "/gate.GateService/BindStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateServiceBindStreamClient{stream}
	return x, nil
}

type GateService_BindStreamClient interface {
	Send(*ByteMessage) error
	Recv() (*ByteMessage, error)
	grpc.ClientStream
}

type gateServiceBindStreamClient struct {
	grpc.ClientStream
}

func (x *gateServiceBindStreamClient) Send(m *ByteMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateServiceBindStreamClient) Recv() (*ByteMessage, error) {
	m := new(ByteMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GateServiceServer is the server API for GateService service.
type GateServiceServer interface {
	//simple bs mode
	SimpleRequest(context.Context, *ByteMessage) (*ByteMessage, error)
	//stream mode
	//cast or receive data between gate and target service
	BindStream(GateService_BindStreamServer) error
}

// UnimplementedGateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGateServiceServer struct {
}

func (*UnimplementedGateServiceServer) SimpleRequest(ctx context.Context, req *ByteMessage) (*ByteMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRequest not implemented")
}
func (*UnimplementedGateServiceServer) BindStream(srv GateService_BindStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BindStream not implemented")
}

func RegisterGateServiceServer(s *grpc.Server, srv GateServiceServer) {
	s.RegisterService(&_GateService_serviceDesc, srv)
}

func _GateService_SimpleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServiceServer).SimpleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gate.GateService/SimpleRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServiceServer).SimpleRequest(ctx, req.(*ByteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateService_BindStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateServiceServer).BindStream(&gateServiceBindStreamServer{stream})
}

type GateService_BindStreamServer interface {
	Send(*ByteMessage) error
	Recv() (*ByteMessage, error)
	grpc.ServerStream
}

type gateServiceBindStreamServer struct {
	grpc.ServerStream
}

func (x *gateServiceBindStreamServer) Send(m *ByteMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateServiceBindStreamServer) Recv() (*ByteMessage, error) {
	m := new(ByteMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gate.GateService",
	HandlerType: (*GateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRequest",
			Handler:    _GateService_SimpleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BindStream",
			Handler:       _GateService_BindStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gate.proto",
}
